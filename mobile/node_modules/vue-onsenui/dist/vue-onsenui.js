/* vue-onsenui v2.6.3 - 2021-06-28 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('onsenui')) :
  typeof define === 'function' && define.amd ? define(['onsenui'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.VueOnsen = factory(global.ons));
}(this, (function (ons) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var ons__default = /*#__PURE__*/_interopDefaultLegacy(ons);

  function setup (ons) {
    return Object.keys(ons).filter(function (k) {
      return [/^is/, /^disable/, /^enable/, /^mock/, /^open/, /^set/, /animit/, /elements/, /GestureDetector/, /notification/, /orientation/, /platform/, /ready/].some(function (t) {
        return k.match(t);
      });
    }).reduce(function (r, k) {
      r[k] = ons[k];
      return r;
    }, { _ons: ons });
  }

  var capitalize = function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  var camelize = function camelize(string) {
    return string.toLowerCase().replace(/-([a-z])/g, function (m, l) {
      return l.toUpperCase();
    });
  };

  var eventToHandler = function eventToHandler(name) {
    return '_on' + capitalize(name);
  };

  var handlerToProp = function handlerToProp(name) {
    return name.slice(2).charAt(0).toLowerCase() + name.slice(2).slice(1);
  };

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  /* Private */
  var _setupDBB = function _setupDBB(component) {
    var dbb = 'onDeviceBackButton';
    // Call original handler or parent handler by default
    var handler = component[dbb] || component.$el[dbb] && component.$el[dbb]._callback || function (e) {
      return e.callParentHandler();
    };

    component.$el[dbb] = function (event) {
      var runDefault = true;

      component.$emit(handlerToProp(dbb), _extends({}, event, {
        preventDefault: function preventDefault() {
          return runDefault = false;
        }
      }));

      runDefault && handler(event);
    };

    component._isDBBSetup = true;
  };

  /* Public */
  // Device Back Button Handler
  var deriveDBB = {
    mounted: function mounted() {
      _setupDBB(this);
    },


    // Core destroys deviceBackButton handlers on disconnectedCallback.
    // This fixes the behavior for <keep-alive> component.
    activated: function activated() {
      this._isDBBSetup === false && _setupDBB(this);
    },
    deactivated: function deactivated() {
      this._isDBBSetup === true && (this._isDBBSetup = false);
    },
    destroyed: function destroyed() {
      this.$el.onDeviceBackButton && this.$el.onDeviceBackButton.destroy();
    }
  };

  var deriveEvents = {
    computed: {
      unrecognizedListeners: function unrecognizedListeners() {
        var _this = this;

        var name = camelize('-' + this.$options._componentTag.slice(6));
        return Object.keys(this.$listeners || {}).filter(function (k) {
          return (_this.$ons.elements[name].events || []).indexOf(k) === -1;
        }).reduce(function (r, k) {
          r[k] = _this.$listeners[k];
          return r;
        }, {});
      }
    },

    mounted: function mounted() {
      var _this2 = this;

      this._handlers = {};

      (this.$el.constructor.events || []).forEach(function (key) {
        _this2._handlers[eventToHandler(key)] = function (event) {
          // Filter events from different components with the same name
          if (event.target === _this2.$el || !/^ons-/i.test(event.target.tagName)) {
            _this2.$emit(key, event);
          }
        };
        _this2.$el.addEventListener(key, _this2._handlers[eventToHandler(key)]);
      });
    },
    beforeDestroy: function beforeDestroy() {
      var _this3 = this;

      Object.keys(this._handlers).forEach(function (key) {
        _this3.$el.removeEventListener(key, _this3._handlers[key]);
      });
      this._handlers = null;
    }
  };

  /* Private */
  var _toggleVisibility = function _toggleVisibility() {
    if (typeof this.visible === 'boolean' && this.visible !== this.$el.visible) {
      this.$el[this.visible ? 'show' : 'hide'].call(this.$el, this.normalizedOptions || this.options);
    }
  };
  var _teleport = function _teleport() {
    if (!this._isDestroyed && (!this.$el.parentNode || this.$el.parentNode !== document.body)) {
      document.body.appendChild(this.$el);
    }
  };
  var _unmount = function _unmount() {
    var _this = this;

    if (this.$el.visible === true) {
      this.$el.hide().then(function () {
        return _this.$el.remove();
      });
    } else {
      this.$el.remove();
    }
  };

  /* Public */
  // Components that can be shown or hidden
  var hidable = {
    props: {
      visible: {
        type: Boolean,
        default: undefined // Avoid casting to false
      }
    },

    watch: {
      visible: function visible() {
        _toggleVisibility.call(this);
      }
    },

    mounted: function mounted() {
      var _this2 = this;

      this.$nextTick(function () {
        return _toggleVisibility.call(_this2);
      });
    },
    activated: function activated() {
      var _this3 = this;

      this.$nextTick(function () {
        return _toggleVisibility.call(_this3);
      });
    }
  };

  // Components with 'options' property
  var hasOptions = {
    props: {
      options: {
        type: Object,
        default: function _default() {
          return {};
        }
      }
    }
  };

  // Provides itself to its descendants
  var selfProvider = {
    provide: function provide() {
      return defineProperty({}, this.$options._componentTag.slice(6), this);
    }
  };

  // Common event for Dialogs
  var dialogCancel = {
    mounted: function mounted() {
      var _this4 = this;

      this.$on('dialog-cancel', function () {
        return _this4.$emit('update:visible', false);
      });
    }
  };

  // Moves the element to a global position
  var portal = {
    mounted: function mounted() {
      _teleport.call(this);
    },
    updated: function updated() {
      _teleport.call(this);
    },
    activated: function activated() {
      _teleport.call(this);
    },
    deactivated: function deactivated() {
      _unmount.call(this);
    },
    beforeDestroy: function beforeDestroy() {
      _unmount.call(this);
    }
  };

  var modifier = {
    props: {
      modifier: {
        type: [String, Array, Object]
      }
    },

    computed: {
      normalizedModifier: function normalizedModifier() {
        var modifier = this.modifier;

        if (typeof modifier === 'string') {
          return modifier;
        }

        if (Array.isArray(modifier)) {
          return modifier.join(' ');
        }

        if ((typeof modifier === 'undefined' ? 'undefined' : _typeof(modifier)) === 'object') {
          return Object.keys(modifier).reduce(function (acc, key) {
            return acc + (modifier[key] ? ' ' + key : '');
          }, '').trim();
        }

        return false;
      }
    }
  };

  var _props, _props2;

  /* Private */
  var model = {
    prop: 'modelProp',
    event: 'modelEvent'
  };

  /* Public */

  // Generic input
  var modelInput = {
    model: model,
    props: (_props = {}, defineProperty(_props, model.prop, [Number, String]), defineProperty(_props, model.event, {
      type: String,
      default: 'input'
    }), _props),

    methods: {
      _updateValue: function _updateValue() {
        if (this[model.prop] !== undefined && this.$el.value !== this[model.prop]) {
          this.$el.value = this[model.prop];
        }
      },
      _onModelEvent: function _onModelEvent(event) {
        this.$emit(model.event, event.target.value);
      }
    },

    watch: defineProperty({}, model.prop, function () {
      this._updateValue();
    }),

    mounted: function mounted() {
      this._updateValue();
      this.$el.addEventListener(this[model.event], this._onModelEvent);
    },
    beforeDestroy: function beforeDestroy() {
      this.$el.removeEventListener(this[model.event], this._onModelEvent);
    }
  };

  // Checkable inputs
  var modelCheckbox = {
    mixins: [modelInput],

    props: (_props2 = {}, defineProperty(_props2, model.prop, [Array, Boolean]), defineProperty(_props2, model.event, {
      type: String,
      default: 'change'
    }), _props2),

    methods: {
      _updateValue: function _updateValue() {
        if (this[model.prop] instanceof Array) {
          this.$el.checked = this[model.prop].indexOf(this.$el.value) >= 0;
        } else {
          this.$el.checked = this[model.prop];
        }
      },
      _onModelEvent: function _onModelEvent(event) {
        var _event$target = event.target,
            value = _event$target.value,
            checked = _event$target.checked;

        var newValue = void 0;

        if (this[model.prop] instanceof Array) {
          // Is Array
          var index = this[model.prop].indexOf(value);
          var included = index >= 0;

          if (included && !checked) {
            newValue = [].concat(toConsumableArray(this[model.prop].slice(0, index)), toConsumableArray(this[model.prop].slice(index + 1, this[model.prop].length)));
          }

          if (!included && checked) {
            newValue = [].concat(toConsumableArray(this[model.prop]), [value]);
          }
        } else {
          // Is Boolean
          newValue = checked;
        }

        // Emit if value changed
        newValue !== undefined && this.$emit(model.event, newValue);
      }
    }
  };

  // Radio input
  var modelRadio = {
    mixins: [modelInput],
    props: defineProperty({}, model.event, {
      type: String,
      default: 'change'
    }),

    methods: {
      _updateValue: function _updateValue() {
        this.$el.checked = this[model.prop] === this.$el.value;
      },
      _onModelEvent: function _onModelEvent(event) {
        var _event$target2 = event.target,
            value = _event$target2.value,
            checked = _event$target2.checked;

        checked && this.$emit(model.event, value);
      }
    }
  };

  //

  var script$K = {
    name: 'v-ons-toolbar',
    mixins: [deriveEvents, hidable, modifier]
  };

  /* script */
  var __vue_script__$K = script$K;

  /* template */
  var __vue_render__$K = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-toolbar', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$K = [];

  /* style */
  var __vue_inject_styles__$K = undefined;
  /* scoped */
  var __vue_scope_id__$K = undefined;
  /* functional template */
  var __vue_is_functional_template__$K = false;
  /* component normalizer */
  function __vue_normalize__$K(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsToolbar.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsToolbar = __vue_normalize__$K({ render: __vue_render__$K, staticRenderFns: __vue_staticRenderFns__$K }, __vue_inject_styles__$K, __vue_script__$K, __vue_scope_id__$K, __vue_is_functional_template__$K);

  //

  var script$J = {
    name: 'v-ons-bottom-toolbar',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$J = script$J;

  /* template */
  var __vue_render__$J = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-bottom-toolbar', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$J = [];

  /* style */
  var __vue_inject_styles__$J = undefined;
  /* scoped */
  var __vue_scope_id__$J = undefined;
  /* functional template */
  var __vue_is_functional_template__$J = false;
  /* component normalizer */
  function __vue_normalize__$J(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsBottomToolbar.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsBottomToolbar = __vue_normalize__$J({ render: __vue_render__$J, staticRenderFns: __vue_staticRenderFns__$J }, __vue_inject_styles__$J, __vue_script__$J, __vue_scope_id__$J, __vue_is_functional_template__$J);

  //

  var script$I = {
    name: 'v-ons-toolbar-button',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$I = script$I;

  /* template */
  var __vue_render__$I = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-toolbar-button', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$I = [];

  /* style */
  var __vue_inject_styles__$I = undefined;
  /* scoped */
  var __vue_scope_id__$I = undefined;
  /* functional template */
  var __vue_is_functional_template__$I = false;
  /* component normalizer */
  function __vue_normalize__$I(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsToolbarButton.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsToolbarButton = __vue_normalize__$I({ render: __vue_render__$I, staticRenderFns: __vue_staticRenderFns__$I }, __vue_inject_styles__$I, __vue_script__$I, __vue_scope_id__$I, __vue_is_functional_template__$I);

  //

  var script$H = {
    name: 'v-ons-alert-dialog-button',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$H = script$H;

  /* template */
  var __vue_render__$H = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-alert-dialog-button', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$H = [];

  /* style */
  var __vue_inject_styles__$H = undefined;
  /* scoped */
  var __vue_scope_id__$H = undefined;
  /* functional template */
  var __vue_is_functional_template__$H = false;
  /* component normalizer */
  function __vue_normalize__$H(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsAlertDialogButton.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsAlertDialogButton = __vue_normalize__$H({ render: __vue_render__$H, staticRenderFns: __vue_staticRenderFns__$H }, __vue_inject_styles__$H, __vue_script__$H, __vue_scope_id__$H, __vue_is_functional_template__$H);

  //

  var script$G = {
    name: 'v-ons-button',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$G = script$G;

  /* template */
  var __vue_render__$G = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-button', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$G = [];

  /* style */
  var __vue_inject_styles__$G = undefined;
  /* scoped */
  var __vue_scope_id__$G = undefined;
  /* functional template */
  var __vue_is_functional_template__$G = false;
  /* component normalizer */
  function __vue_normalize__$G(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsButton.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsButton = __vue_normalize__$G({ render: __vue_render__$G, staticRenderFns: __vue_staticRenderFns__$G }, __vue_inject_styles__$G, __vue_script__$G, __vue_scope_id__$G, __vue_is_functional_template__$G);

  //

  var script$F = {
    name: 'v-ons-icon',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$F = script$F;

  /* template */
  var __vue_render__$F = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-icon', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$F = [];

  /* style */
  var __vue_inject_styles__$F = undefined;
  /* scoped */
  var __vue_scope_id__$F = undefined;
  /* functional template */
  var __vue_is_functional_template__$F = false;
  /* component normalizer */
  function __vue_normalize__$F(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsIcon.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsIcon = __vue_normalize__$F({ render: __vue_render__$F, staticRenderFns: __vue_staticRenderFns__$F }, __vue_inject_styles__$F, __vue_script__$F, __vue_scope_id__$F, __vue_is_functional_template__$F);

  //

  var script$E = {
    name: 'v-ons-card',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$E = script$E;

  /* template */
  var __vue_render__$E = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-card', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$E = [];

  /* style */
  var __vue_inject_styles__$E = undefined;
  /* scoped */
  var __vue_scope_id__$E = undefined;
  /* functional template */
  var __vue_is_functional_template__$E = false;
  /* component normalizer */
  function __vue_normalize__$E(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsCard.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsCard = __vue_normalize__$E({ render: __vue_render__$E, staticRenderFns: __vue_staticRenderFns__$E }, __vue_inject_styles__$E, __vue_script__$E, __vue_scope_id__$E, __vue_is_functional_template__$E);

  //

  var script$D = {
    name: 'v-ons-list',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$D = script$D;

  /* template */
  var __vue_render__$D = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-list', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$D = [];

  /* style */
  var __vue_inject_styles__$D = undefined;
  /* scoped */
  var __vue_scope_id__$D = undefined;
  /* functional template */
  var __vue_is_functional_template__$D = false;
  /* component normalizer */
  function __vue_normalize__$D(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsList.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsList = __vue_normalize__$D({ render: __vue_render__$D, staticRenderFns: __vue_staticRenderFns__$D }, __vue_inject_styles__$D, __vue_script__$D, __vue_scope_id__$D, __vue_is_functional_template__$D);

  //

  var script$C = {
    name: 'v-ons-list-item',
    mixins: [deriveEvents, modifier],
    props: {
      expanded: {
        type: Boolean
      }
    },
    methods: {
      onExpansion: function onExpansion() {
        if (this.expanded !== this.$el.expanded) {
          this.$emit('update:expanded', this.$el.expanded);
        }
      }
    },
    watch: {
      expanded: function expanded() {
        var action = this.expanded ? 'show' : 'hide';
        this.$el[action + 'Expansion']();
      }
    }
  };

  /* script */
  var __vue_script__$C = script$C;

  /* template */
  var __vue_render__$C = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-list-item', _vm._g({ attrs: { "modifier": _vm.normalizedModifier }, on: { "expansion": _vm.onExpansion } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$C = [];

  /* style */
  var __vue_inject_styles__$C = undefined;
  /* scoped */
  var __vue_scope_id__$C = undefined;
  /* functional template */
  var __vue_is_functional_template__$C = false;
  /* component normalizer */
  function __vue_normalize__$C(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsListItem.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsListItem = __vue_normalize__$C({ render: __vue_render__$C, staticRenderFns: __vue_staticRenderFns__$C }, __vue_inject_styles__$C, __vue_script__$C, __vue_scope_id__$C, __vue_is_functional_template__$C);

  //

  var script$B = {
    name: 'v-ons-list-title',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$B = script$B;

  /* template */
  var __vue_render__$B = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-list-title', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$B = [];

  /* style */
  var __vue_inject_styles__$B = undefined;
  /* scoped */
  var __vue_scope_id__$B = undefined;
  /* functional template */
  var __vue_is_functional_template__$B = false;
  /* component normalizer */
  function __vue_normalize__$B(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsListTitle.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsListTitle = __vue_normalize__$B({ render: __vue_render__$B, staticRenderFns: __vue_staticRenderFns__$B }, __vue_inject_styles__$B, __vue_script__$B, __vue_scope_id__$B, __vue_is_functional_template__$B);

  //

  var script$A = {
    name: 'v-ons-list-header',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$A = script$A;

  /* template */
  var __vue_render__$A = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-list-header', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$A = [];

  /* style */
  var __vue_inject_styles__$A = undefined;
  /* scoped */
  var __vue_scope_id__$A = undefined;
  /* functional template */
  var __vue_is_functional_template__$A = false;
  /* component normalizer */
  function __vue_normalize__$A(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsListHeader.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsListHeader = __vue_normalize__$A({ render: __vue_render__$A, staticRenderFns: __vue_staticRenderFns__$A }, __vue_inject_styles__$A, __vue_script__$A, __vue_scope_id__$A, __vue_is_functional_template__$A);

  //

  var script$z = {
    name: 'v-ons-ripple',
    mixins: [deriveEvents]
  };

  /* script */
  var __vue_script__$z = script$z;

  /* template */
  var __vue_render__$z = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-ripple', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$z = [];

  /* style */
  var __vue_inject_styles__$z = undefined;
  /* scoped */
  var __vue_scope_id__$z = undefined;
  /* functional template */
  var __vue_is_functional_template__$z = false;
  /* component normalizer */
  function __vue_normalize__$z(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsRipple.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsRipple = __vue_normalize__$z({ render: __vue_render__$z, staticRenderFns: __vue_staticRenderFns__$z }, __vue_inject_styles__$z, __vue_script__$z, __vue_scope_id__$z, __vue_is_functional_template__$z);

  //

  var script$y = {
    name: 'v-ons-row',
    mixins: [deriveEvents]
  };

  /* script */
  var __vue_script__$y = script$y;

  /* template */
  var __vue_render__$y = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-row', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$y = [];

  /* style */
  var __vue_inject_styles__$y = undefined;
  /* scoped */
  var __vue_scope_id__$y = undefined;
  /* functional template */
  var __vue_is_functional_template__$y = false;
  /* component normalizer */
  function __vue_normalize__$y(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsRow.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsRow = __vue_normalize__$y({ render: __vue_render__$y, staticRenderFns: __vue_staticRenderFns__$y }, __vue_inject_styles__$y, __vue_script__$y, __vue_scope_id__$y, __vue_is_functional_template__$y);

  //

  var script$x = {
    name: 'v-ons-col',
    mixins: [deriveEvents]
  };

  /* script */
  var __vue_script__$x = script$x;

  /* template */
  var __vue_render__$x = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-col', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$x = [];

  /* style */
  var __vue_inject_styles__$x = undefined;
  /* scoped */
  var __vue_scope_id__$x = undefined;
  /* functional template */
  var __vue_is_functional_template__$x = false;
  /* component normalizer */
  function __vue_normalize__$x(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsCol.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsCol = __vue_normalize__$x({ render: __vue_render__$x, staticRenderFns: __vue_staticRenderFns__$x }, __vue_inject_styles__$x, __vue_script__$x, __vue_scope_id__$x, __vue_is_functional_template__$x);

  //

  var script$w = {
    name: 'v-ons-progress-bar',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$w = script$w;

  /* template */
  var __vue_render__$w = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-progress-bar', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$w = [];

  /* style */
  var __vue_inject_styles__$w = undefined;
  /* scoped */
  var __vue_scope_id__$w = undefined;
  /* functional template */
  var __vue_is_functional_template__$w = false;
  /* component normalizer */
  function __vue_normalize__$w(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsProgressBar.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsProgressBar = __vue_normalize__$w({ render: __vue_render__$w, staticRenderFns: __vue_staticRenderFns__$w }, __vue_inject_styles__$w, __vue_script__$w, __vue_scope_id__$w, __vue_is_functional_template__$w);

  //

  var script$v = {
    name: 'v-ons-progress-circular',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$v = script$v;

  /* template */
  var __vue_render__$v = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-progress-circular', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$v = [];

  /* style */
  var __vue_inject_styles__$v = undefined;
  /* scoped */
  var __vue_scope_id__$v = undefined;
  /* functional template */
  var __vue_is_functional_template__$v = false;
  /* component normalizer */
  function __vue_normalize__$v(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsProgressCircular.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsProgressCircular = __vue_normalize__$v({ render: __vue_render__$v, staticRenderFns: __vue_staticRenderFns__$v }, __vue_inject_styles__$v, __vue_script__$v, __vue_scope_id__$v, __vue_is_functional_template__$v);

  //

  var script$u = {
    name: 'v-ons-carousel-item',
    mixins: [deriveEvents]
  };

  /* script */
  var __vue_script__$u = script$u;

  /* template */
  var __vue_render__$u = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-carousel-item', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$u = [];

  /* style */
  var __vue_inject_styles__$u = undefined;
  /* scoped */
  var __vue_scope_id__$u = undefined;
  /* functional template */
  var __vue_is_functional_template__$u = false;
  /* component normalizer */
  function __vue_normalize__$u(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsCarouselItem.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsCarouselItem = __vue_normalize__$u({ render: __vue_render__$u, staticRenderFns: __vue_staticRenderFns__$u }, __vue_inject_styles__$u, __vue_script__$u, __vue_scope_id__$u, __vue_is_functional_template__$u);

  //

  var script$t = {
    name: 'v-ons-splitter-mask',
    mixins: [deriveEvents]
  };

  /* script */
  var __vue_script__$t = script$t;

  /* template */
  var __vue_render__$t = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-splitter-mask', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$t = [];

  /* style */
  var __vue_inject_styles__$t = undefined;
  /* scoped */
  var __vue_scope_id__$t = undefined;
  /* functional template */
  var __vue_is_functional_template__$t = false;
  /* component normalizer */
  function __vue_normalize__$t(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSplitterMask.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSplitterMask = __vue_normalize__$t({ render: __vue_render__$t, staticRenderFns: __vue_staticRenderFns__$t }, __vue_inject_styles__$t, __vue_script__$t, __vue_scope_id__$t, __vue_is_functional_template__$t);

  //

  var script$s = {
    name: 'v-ons-splitter-content',
    mixins: [deriveEvents]
  };

  /* script */
  var __vue_script__$s = script$s;

  /* template */
  var __vue_render__$s = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-splitter-content', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$s = [];

  /* style */
  var __vue_inject_styles__$s = undefined;
  /* scoped */
  var __vue_scope_id__$s = undefined;
  /* functional template */
  var __vue_is_functional_template__$s = false;
  /* component normalizer */
  function __vue_normalize__$s(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSplitterContent.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSplitterContent = __vue_normalize__$s({ render: __vue_render__$s, staticRenderFns: __vue_staticRenderFns__$s }, __vue_inject_styles__$s, __vue_script__$s, __vue_scope_id__$s, __vue_is_functional_template__$s);

  //

  var script$r = {
    name: 'v-ons-splitter',
    mixins: [deriveEvents, selfProvider, deriveDBB]
  };

  /* script */
  var __vue_script__$r = script$r;

  /* template */
  var __vue_render__$r = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-splitter', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$r = [];

  /* style */
  var __vue_inject_styles__$r = undefined;
  /* scoped */
  var __vue_scope_id__$r = undefined;
  /* functional template */
  var __vue_is_functional_template__$r = false;
  /* component normalizer */
  function __vue_normalize__$r(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSplitter.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSplitter = __vue_normalize__$r({ render: __vue_render__$r, staticRenderFns: __vue_staticRenderFns__$r }, __vue_inject_styles__$r, __vue_script__$r, __vue_scope_id__$r, __vue_is_functional_template__$r);

  //

  var script$q = {
    name: 'v-ons-switch',
    mixins: [deriveEvents, modelCheckbox, modifier]
  };

  /* script */
  var __vue_script__$q = script$q;

  /* template */
  var __vue_render__$q = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-switch', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$q = [];

  /* style */
  var __vue_inject_styles__$q = undefined;
  /* scoped */
  var __vue_scope_id__$q = undefined;
  /* functional template */
  var __vue_is_functional_template__$q = false;
  /* component normalizer */
  function __vue_normalize__$q(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSwitch.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSwitch = __vue_normalize__$q({ render: __vue_render__$q, staticRenderFns: __vue_staticRenderFns__$q }, __vue_inject_styles__$q, __vue_script__$q, __vue_scope_id__$q, __vue_is_functional_template__$q);

  //

  var script$p = {
    name: 'v-ons-checkbox',
    mixins: [deriveEvents, modelCheckbox, modifier]
  };

  /* script */
  var __vue_script__$p = script$p;

  /* template */
  var __vue_render__$p = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-checkbox', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$p = [];

  /* style */
  var __vue_inject_styles__$p = undefined;
  /* scoped */
  var __vue_scope_id__$p = undefined;
  /* functional template */
  var __vue_is_functional_template__$p = false;
  /* component normalizer */
  function __vue_normalize__$p(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsCheckbox.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsCheckbox = __vue_normalize__$p({ render: __vue_render__$p, staticRenderFns: __vue_staticRenderFns__$p }, __vue_inject_styles__$p, __vue_script__$p, __vue_scope_id__$p, __vue_is_functional_template__$p);

  //

  var script$o = {
    name: 'v-ons-input',
    mixins: [deriveEvents, modelInput, modifier]
  };

  /* script */
  var __vue_script__$o = script$o;

  /* template */
  var __vue_render__$o = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-input', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$o = [];

  /* style */
  var __vue_inject_styles__$o = undefined;
  /* scoped */
  var __vue_scope_id__$o = undefined;
  /* functional template */
  var __vue_is_functional_template__$o = false;
  /* component normalizer */
  function __vue_normalize__$o(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsInput.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsInput = __vue_normalize__$o({ render: __vue_render__$o, staticRenderFns: __vue_staticRenderFns__$o }, __vue_inject_styles__$o, __vue_script__$o, __vue_scope_id__$o, __vue_is_functional_template__$o);

  //

  var script$n = {
    name: 'v-ons-search-input',
    mixins: [deriveEvents, modelInput, modifier]
  };

  /* script */
  var __vue_script__$n = script$n;

  /* template */
  var __vue_render__$n = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-search-input', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$n = [];

  /* style */
  var __vue_inject_styles__$n = undefined;
  /* scoped */
  var __vue_scope_id__$n = undefined;
  /* functional template */
  var __vue_is_functional_template__$n = false;
  /* component normalizer */
  function __vue_normalize__$n(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSearchInput.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSearchInput = __vue_normalize__$n({ render: __vue_render__$n, staticRenderFns: __vue_staticRenderFns__$n }, __vue_inject_styles__$n, __vue_script__$n, __vue_scope_id__$n, __vue_is_functional_template__$n);

  //

  var script$m = {
    name: 'v-ons-range',
    mixins: [deriveEvents, modelInput, modifier]
  };

  /* script */
  var __vue_script__$m = script$m;

  /* template */
  var __vue_render__$m = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-range', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$m = [];

  /* style */
  var __vue_inject_styles__$m = undefined;
  /* scoped */
  var __vue_scope_id__$m = undefined;
  /* functional template */
  var __vue_is_functional_template__$m = false;
  /* component normalizer */
  function __vue_normalize__$m(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsRange.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsRange = __vue_normalize__$m({ render: __vue_render__$m, staticRenderFns: __vue_staticRenderFns__$m }, __vue_inject_styles__$m, __vue_script__$m, __vue_scope_id__$m, __vue_is_functional_template__$m);

  //

  var script$l = {
    name: 'v-ons-radio',
    mixins: [deriveEvents, modelRadio, modifier]
  };

  /* script */
  var __vue_script__$l = script$l;

  /* template */
  var __vue_render__$l = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-radio', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$l = [];

  /* style */
  var __vue_inject_styles__$l = undefined;
  /* scoped */
  var __vue_scope_id__$l = undefined;
  /* functional template */
  var __vue_is_functional_template__$l = false;
  /* component normalizer */
  function __vue_normalize__$l(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsRadio.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsRadio = __vue_normalize__$l({ render: __vue_render__$l, staticRenderFns: __vue_staticRenderFns__$l }, __vue_inject_styles__$l, __vue_script__$l, __vue_scope_id__$l, __vue_is_functional_template__$l);

  //

  var script$k = {
    name: 'v-ons-fab',
    mixins: [deriveEvents, hidable, modifier]
  };

  /* script */
  var __vue_script__$k = script$k;

  /* template */
  var __vue_render__$k = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-fab', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$k = [];

  /* style */
  var __vue_inject_styles__$k = undefined;
  /* scoped */
  var __vue_scope_id__$k = undefined;
  /* functional template */
  var __vue_is_functional_template__$k = false;
  /* component normalizer */
  function __vue_normalize__$k(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsFab.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsFab = __vue_normalize__$k({ render: __vue_render__$k, staticRenderFns: __vue_staticRenderFns__$k }, __vue_inject_styles__$k, __vue_script__$k, __vue_scope_id__$k, __vue_is_functional_template__$k);

  //

  var script$j = {
    name: 'v-ons-speed-dial-item',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$j = script$j;

  /* template */
  var __vue_render__$j = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-speed-dial-item', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$j = [];

  /* style */
  var __vue_inject_styles__$j = undefined;
  /* scoped */
  var __vue_scope_id__$j = undefined;
  /* functional template */
  var __vue_is_functional_template__$j = false;
  /* component normalizer */
  function __vue_normalize__$j(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSpeedDialItem.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSpeedDialItem = __vue_normalize__$j({ render: __vue_render__$j, staticRenderFns: __vue_staticRenderFns__$j }, __vue_inject_styles__$j, __vue_script__$j, __vue_scope_id__$j, __vue_is_functional_template__$j);

  //

  var script$i = {
    name: 'v-ons-dialog',
    mixins: [deriveEvents, hidable, hasOptions, dialogCancel, deriveDBB, portal, modifier]
  };

  /* script */
  var __vue_script__$i = script$i;

  /* template */
  var __vue_render__$i = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-dialog', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$i = [];

  /* style */
  var __vue_inject_styles__$i = undefined;
  /* scoped */
  var __vue_scope_id__$i = undefined;
  /* functional template */
  var __vue_is_functional_template__$i = false;
  /* component normalizer */
  function __vue_normalize__$i(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsDialog.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsDialog = __vue_normalize__$i({ render: __vue_render__$i, staticRenderFns: __vue_staticRenderFns__$i }, __vue_inject_styles__$i, __vue_script__$i, __vue_scope_id__$i, __vue_is_functional_template__$i);

  //

  var script$h = {
    name: 'v-ons-action-sheet',
    mixins: [deriveEvents, hidable, hasOptions, dialogCancel, deriveDBB, portal, modifier]
  };

  /* script */
  var __vue_script__$h = script$h;

  /* template */
  var __vue_render__$h = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-action-sheet', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$h = [];

  /* style */
  var __vue_inject_styles__$h = undefined;
  /* scoped */
  var __vue_scope_id__$h = undefined;
  /* functional template */
  var __vue_is_functional_template__$h = false;
  /* component normalizer */
  function __vue_normalize__$h(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsActionSheet.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsActionSheet = __vue_normalize__$h({ render: __vue_render__$h, staticRenderFns: __vue_staticRenderFns__$h }, __vue_inject_styles__$h, __vue_script__$h, __vue_scope_id__$h, __vue_is_functional_template__$h);

  //

  var script$g = {
    name: 'v-ons-action-sheet-button',
    mixins: [deriveEvents, modifier]
  };

  /* script */
  var __vue_script__$g = script$g;

  /* template */
  var __vue_render__$g = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-action-sheet-button', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$g = [];

  /* style */
  var __vue_inject_styles__$g = undefined;
  /* scoped */
  var __vue_scope_id__$g = undefined;
  /* functional template */
  var __vue_is_functional_template__$g = false;
  /* component normalizer */
  function __vue_normalize__$g(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsActionSheetButton.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsActionSheetButton = __vue_normalize__$g({ render: __vue_render__$g, staticRenderFns: __vue_staticRenderFns__$g }, __vue_inject_styles__$g, __vue_script__$g, __vue_scope_id__$g, __vue_is_functional_template__$g);

  //

  var script$f = {
    name: 'v-ons-modal',
    mixins: [deriveEvents, hidable, hasOptions, deriveDBB, portal, modifier]
  };

  /* script */
  var __vue_script__$f = script$f;

  /* template */
  var __vue_render__$f = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-modal', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$f = [];

  /* style */
  var __vue_inject_styles__$f = undefined;
  /* scoped */
  var __vue_scope_id__$f = undefined;
  /* functional template */
  var __vue_is_functional_template__$f = false;
  /* component normalizer */
  function __vue_normalize__$f(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsModal.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsModal = __vue_normalize__$f({ render: __vue_render__$f, staticRenderFns: __vue_staticRenderFns__$f }, __vue_inject_styles__$f, __vue_script__$f, __vue_scope_id__$f, __vue_is_functional_template__$f);

  //

  var script$e = {
    name: 'v-ons-toast',
    mixins: [deriveEvents, hidable, hasOptions, deriveDBB, portal, modifier]
  };

  /* script */
  var __vue_script__$e = script$e;

  /* template */
  var __vue_render__$e = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-toast', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$e = [];

  /* style */
  var __vue_inject_styles__$e = undefined;
  /* scoped */
  var __vue_scope_id__$e = undefined;
  /* functional template */
  var __vue_is_functional_template__$e = false;
  /* component normalizer */
  function __vue_normalize__$e(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsToast.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsToast = __vue_normalize__$e({ render: __vue_render__$e, staticRenderFns: __vue_staticRenderFns__$e }, __vue_inject_styles__$e, __vue_script__$e, __vue_scope_id__$e, __vue_is_functional_template__$e);

  //

  var script$d = {
    name: 'v-ons-popover',
    mixins: [hidable, hasOptions, dialogCancel, deriveEvents, deriveDBB, portal],

    props: {
      target: {
        validator: function validator(value) {
          return value._isVue || typeof value === 'string' || value instanceof Event || value instanceof HTMLElement;
        }
      }
    },

    computed: {
      normalizedTarget: function normalizedTarget() {
        if (this.target && this.target._isVue) {
          return this.target.$el;
        }
        return this.target;
      },
      normalizedOptions: function normalizedOptions() {
        if (this.target) {
          return _extends({
            target: this.normalizedTarget
          }, this.options);
        }
        return this.options;
      }
    }
  };

  /* script */
  var __vue_script__$d = script$d;

  /* template */
  var __vue_render__$d = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-popover', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$d = [];

  /* style */
  var __vue_inject_styles__$d = undefined;
  /* scoped */
  var __vue_scope_id__$d = undefined;
  /* functional template */
  var __vue_is_functional_template__$d = false;
  /* component normalizer */
  function __vue_normalize__$d(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsPopover.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsPopover = __vue_normalize__$d({ render: __vue_render__$d, staticRenderFns: __vue_staticRenderFns__$d }, __vue_inject_styles__$d, __vue_script__$d, __vue_scope_id__$d, __vue_is_functional_template__$d);

  //

  var script$c = {
    name: 'v-ons-alert-dialog',
    mixins: [hidable, hasOptions, dialogCancel, deriveEvents, deriveDBB, portal, modifier],

    props: {
      title: {
        type: String
      },
      footer: {
        type: Object,
        validator: function validator(value) {
          return Object.keys(value).every(function (key) {
            return value[key] instanceof Function;
          });
        }
      }
    }
  };

  /* script */
  var __vue_script__$c = script$c;

  /* template */
  var __vue_render__$c = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-alert-dialog', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.unrecognizedListeners), [_c('div', { staticClass: "alert-dialog-title" }, [_vm._t("title", function () {
      return [_vm._v(_vm._s(_vm.title))];
    })], 2), _vm._v(" "), _c('div', { staticClass: "alert-dialog-content" }, [_vm._t("default")], 2), _vm._v(" "), _c('div', { staticClass: "alert-dialog-footer" }, [_vm._t("footer", function () {
      return _vm._l(_vm.footer, function (handler, key) {
        return _c('ons-alert-dialog-button', { key: key, on: { "click": handler } }, [_vm._v(_vm._s(key))]);
      });
    })], 2)]);
  };
  var __vue_staticRenderFns__$c = [];

  /* style */
  var __vue_inject_styles__$c = undefined;
  /* scoped */
  var __vue_scope_id__$c = undefined;
  /* functional template */
  var __vue_is_functional_template__$c = false;
  /* component normalizer */
  function __vue_normalize__$c(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsAlertDialog.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsAlertDialog = __vue_normalize__$c({ render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c }, __vue_inject_styles__$c, __vue_script__$c, __vue_scope_id__$c, __vue_is_functional_template__$c);

  //

  var script$b = {
    name: 'v-ons-speed-dial',
    mixins: [deriveEvents, hidable],

    props: {
      open: {
        type: Boolean,
        default: undefined
      }
    },

    methods: {
      action: function action() {
        var runDefault = true;
        this.$emit('click', { preventDefault: function preventDefault() {
            return runDefault = false;
          } });

        if (runDefault) {
          this.$el.toggleItems();
        }
      },
      _shouldUpdate: function _shouldUpdate() {
        return this.open !== undefined && this.open !== this.$el.isOpen();
      },
      _updateToggle: function _updateToggle() {
        this._shouldUpdate() && this.$el[this.open ? 'showItems' : 'hideItems'].call(this.$el);
      }
    },

    watch: {
      open: function open() {
        this._updateToggle();
      }
    },

    mounted: function mounted() {
      var _this = this;

      this.$on(['open', 'close'], function () {
        return _this._shouldUpdate() && _this.$emit('update:open', _this.$el.isOpen());
      });

      this._updateToggle();
    }
  };

  /* script */
  var __vue_script__$b = script$b;

  /* template */
  var __vue_render__$b = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-speed-dial', { domProps: { "onClick": _vm.action } }, [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$b = [];

  /* style */
  var __vue_inject_styles__$b = undefined;
  /* scoped */
  var __vue_scope_id__$b = undefined;
  /* functional template */
  var __vue_is_functional_template__$b = false;
  /* component normalizer */
  function __vue_normalize__$b(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSpeedDial.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSpeedDial = __vue_normalize__$b({ render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b }, __vue_inject_styles__$b, __vue_script__$b, __vue_scope_id__$b, __vue_is_functional_template__$b);

  //

  var script$a = {
    name: 'v-ons-carousel',
    mixins: [hasOptions, deriveEvents],

    props: {
      index: {
        type: Number
      },
      onSwipe: {
        type: Function
      }
    },

    watch: {
      index: function index() {
        if (this.index !== this.$el.getActiveIndex()) {
          this.$el.setActiveIndex(this.index, this.options);
        }
      }
    }
  };

  /* script */
  var __vue_script__$a = script$a;

  /* template */
  var __vue_render__$a = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-carousel', _vm._g({ attrs: { "initial-index": _vm.index }, domProps: { "onSwipe": _vm.onSwipe }, on: { "postchange": function postchange($event) {
          if ($event.target !== $event.currentTarget) {
            return null;
          }return _vm.$emit('update:index', $event.activeIndex);
        } } }, _vm.unrecognizedListeners), [_c('div', [_vm._t("default")], 2), _vm._v(" "), _c('div')]);
  };
  var __vue_staticRenderFns__$a = [];

  /* style */
  var __vue_inject_styles__$a = undefined;
  /* scoped */
  var __vue_scope_id__$a = undefined;
  /* functional template */
  var __vue_is_functional_template__$a = false;
  /* component normalizer */
  function __vue_normalize__$a(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsCarousel.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsCarousel = __vue_normalize__$a({ render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a }, __vue_inject_styles__$a, __vue_script__$a, __vue_scope_id__$a, __vue_is_functional_template__$a);

  //
  //
  //
  //
  //

  // 'ons-tab';

  var script$9 = {
    name: 'v-ons-tab',
    inject: ['tabbar'],

    props: {
      page: {},
      props: {},
      active: {
        type: Boolean
      }
    },

    methods: {
      action: function action() {
        var runDefault = true;
        this.$emit('click', { preventDefault: function preventDefault() {
            return runDefault = false;
          } });

        if (runDefault) {
          this.tabbar.$el.setActiveTab(this.$el.index, _extends({ reject: false }, this.tabbar.options));
        }
      }
    },

    watch: {
      active: function active() {
        this.$el.setActive(this.active);
      }
    }
  };

  /* script */
  var __vue_script__$9 = script$9;

  /* template */
  var __vue_render__$9 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-tab', { attrs: { "active": _vm.active }, domProps: { "onClick": _vm.action } });
  };
  var __vue_staticRenderFns__$9 = [];

  /* style */
  var __vue_inject_styles__$9 = undefined;
  /* scoped */
  var __vue_scope_id__$9 = undefined;
  /* functional template */
  var __vue_is_functional_template__$9 = false;
  /* component normalizer */
  function __vue_normalize__$9(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsTab.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsTab = __vue_normalize__$9({ render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 }, __vue_inject_styles__$9, __vue_script__$9, __vue_scope_id__$9, __vue_is_functional_template__$9);

  //

  var script$8 = {
    name: 'v-ons-tabbar',
    mixins: [deriveEvents, hasOptions, hidable, selfProvider, modifier],

    props: {
      index: {
        type: Number
      },
      tabs: {
        type: Array,
        validator: function validator(value) {
          return value.every(function (tab) {
            return ['icon', 'label', 'page'].some(function (prop) {
              return !!Object.getOwnPropertyDescriptor(tab, prop);
            });
          });
        }
      },
      onSwipe: {
        type: Function
      },
      tabbarStyle: {
        type: null
      }
    },

    methods: {
      _tabKey: function _tabKey(tab) {
        return tab.key || tab.label || tab.icon;
      }
    },

    watch: {
      index: function index() {
        if (this.index !== this.$el.getActiveTabIndex()) {
          this.$el.setActiveTab(this.index, _extends({ reject: false }, this.options));
        }
      }
    }
  };

  /* script */
  var __vue_script__$8 = script$8;

  /* template */
  var __vue_render__$8 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-tabbar', _vm._g({ attrs: { "activeIndex": _vm.index, "modifier": _vm.normalizedModifier }, domProps: { "onSwipe": _vm.onSwipe }, on: { "prechange": function prechange($event) {
          if ($event.target !== $event.currentTarget) {
            return null;
          }_vm.$nextTick(function () {
            return !$event.detail.canceled && _vm.$emit('update:index', $event.index);
          });
        } } }, _vm.unrecognizedListeners), [_c('div', { staticClass: "tabbar__content" }, [_c('div', [_vm._t("pages", function () {
      return _vm._l(_vm.tabs, function (tab) {
        return _c(tab.page, _vm._g(_vm._b({ key: tab.page.key || tab.page.name || _vm._tabKey(tab), tag: "component" }, 'component', tab.props, false), _vm.unrecognizedListeners));
      });
    })], 2), _vm._v(" "), _c('div')]), _vm._v(" "), _c('div', { staticClass: "tabbar", style: _vm.tabbarStyle }, [_vm._t("default", function () {
      return _vm._l(_vm.tabs, function (tab) {
        return _c('v-ons-tab', _vm._b({ key: _vm._tabKey(tab) }, 'v-ons-tab', tab, false));
      });
    }), _vm._v(" "), _c('div', { staticClass: "tabbar__border" })], 2)]);
  };
  var __vue_staticRenderFns__$8 = [];

  /* style */
  var __vue_inject_styles__$8 = undefined;
  /* scoped */
  var __vue_scope_id__$8 = undefined;
  /* functional template */
  var __vue_is_functional_template__$8 = false;
  /* component normalizer */
  function __vue_normalize__$8(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsTabbar.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsTabbar = __vue_normalize__$8({ render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 }, __vue_inject_styles__$8, __vue_script__$8, __vue_scope_id__$8, __vue_is_functional_template__$8);

  //

  var script$7 = {
    name: 'v-ons-back-button',
    inject: ['navigator'],
    mixins: [modifier],

    methods: {
      action: function action() {
        var runDefault = true;
        this.$emit('click', { preventDefault: function preventDefault() {
            return runDefault = false;
          } });

        if (runDefault && this.navigator.pageStack.length > 1) {
          this.navigator.popPage();
        }
      }
    }
  };

  /* script */
  var __vue_script__$7 = script$7;

  /* template */
  var __vue_render__$7 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-back-button', { domProps: { "onClick": _vm.action } }, [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$7 = [];

  /* style */
  var __vue_inject_styles__$7 = undefined;
  /* scoped */
  var __vue_scope_id__$7 = undefined;
  /* functional template */
  var __vue_is_functional_template__$7 = false;
  /* component normalizer */
  function __vue_normalize__$7(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsBackButton.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsBackButton = __vue_normalize__$7({ render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 }, __vue_inject_styles__$7, __vue_script__$7, __vue_scope_id__$7, __vue_is_functional_template__$7);

  //

  var script$6 = {
    name: 'v-ons-navigator',
    mixins: [hasOptions, selfProvider, deriveEvents, deriveDBB],

    props: {
      pageStack: {
        type: Array,
        required: true
      },
      popPage: {
        type: Function,
        default: function _default() {
          this.pageStack.pop();
        }
      }
    },

    methods: {
      isReady: function isReady() {
        if (this.hasOwnProperty('_ready') && this._ready instanceof Promise) {
          return this._ready;
        }
        return Promise.resolve();
      },
      onDeviceBackButton: function onDeviceBackButton(event) {
        if (this.pageStack.length > 1) {
          this.popPage();
        } else {
          event.callParentHandler();
        }
      },
      _findScrollPage: function _findScrollPage(page) {
        var nextPage = page._contentElement.children.length === 1 && this.$ons._ons._util.getTopPage(page._contentElement.children[0]);
        return nextPage ? this._findScrollPage(nextPage) : page;
      },
      _eachPage: function _eachPage(start, end, cb) {
        for (var i = start; i < end; i++) {
          cb(this.$children[i].$el);
        }
      },
      _reattachPage: function _reattachPage(pageElement) {
        var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var restoreScroll = arguments[2];

        this.$el.insertBefore(pageElement, position);
        restoreScroll instanceof Function && restoreScroll();
        pageElement._isShown = true;
      },
      _redetachPage: function _redetachPage(pageElement) {
        pageElement._destroy();
        return Promise.resolve();
      },
      _animate: function _animate(_ref) {
        var _this = this;

        var lastLength = _ref.lastLength,
            currentLength = _ref.currentLength,
            lastTopPage = _ref.lastTopPage,
            currentTopPage = _ref.currentTopPage,
            restoreScroll = _ref.restoreScroll;

        var pushedOptions = this.pageStack[this.pageStack.length - 1].onsNavigatorOptions || currentTopPage.__vue__.onsNavigatorOptions || {};

        // Push
        if (currentLength > lastLength) {
          var isReattached = false;
          if (lastTopPage.parentElement !== this.$el) {
            this._reattachPage(lastTopPage, this.$el.children[lastLength - 1], restoreScroll);
            isReattached = true;
            lastLength--;
          }

          this._eachPage(lastLength, currentLength, function (el) {
            el.style.visibility = 'hidden';
          });
          this._eachPage(lastLength, currentLength - 1, function (el) {
            el.pushedOptions = pushedOptions;
          });

          return this.$el._pushPage(_extends({}, pushedOptions, { leavePage: lastTopPage })).then(function () {
            setImmediate(function () {
              _this._eachPage(lastLength, currentLength, function (el) {
                el.style.visibility = '';
              });
              _this._eachPage(lastLength - 1, currentLength - 1, function (el) {
                el.style.display = 'none';
              });
            });

            if (isReattached) {
              _this._redetachPage(lastTopPage);
            }
          }, function () {
            // push failed or was canceled
            _this._canceled = true;
            _this.pageStack.pop();
          });
        }

        // Pop
        if (currentLength < lastLength) {
          this._reattachPage(lastTopPage, null, restoreScroll);
          return this.$el._popPage({}, function () {
            return _this._redetachPage(lastTopPage);
          });
        }

        // Replace page
        currentTopPage.style.visibility = 'hidden';
        this._reattachPage(lastTopPage, currentTopPage, restoreScroll);
        return this.$el._pushPage(_extends({}, pushedOptions, { _replacePage: true })).then(function () {
          return _this._redetachPage(lastTopPage);
        });
      },
      _checkSwipe: function _checkSwipe(event) {
        if (this.$el.hasAttribute('swipeable') && event.leavePage !== this.$el.lastChild && event.leavePage === this.$children[this.$children.length - 1].$el) {
          this.popPage();
        }
      }
    },

    watch: {
      pageStack: function pageStack(after, before) {
        if (this.$el.hasAttribute('swipeable') && this.$children.length !== this.$el.children.length) {
          return;
        }

        // watcher triggered by undoing a canceled push or pop
        if (this._canceled) {
          this._canceled = null;
          return;
        }

        var propWasMutated = after === before; // Can be mutated or replaced
        var lastTopPage = this.$children[this.$children.length - 1].$el;
        var scrollElement = this._findScrollPage(lastTopPage);
        var scrollValue = scrollElement.scrollTop || 0;

        this._pageStackUpdate = {
          lastTopPage: lastTopPage,
          lastLength: propWasMutated ? this.$children.length : before.length,
          currentLength: !propWasMutated && after.length,
          restoreScroll: function restoreScroll() {
            return scrollElement.scrollTop = scrollValue;
          }
        };

        // this.$nextTick(() => { }); // Waits too long, updated() hook is faster and prevents flickerings
      }
    },

    updated: function updated() {
      if (this._pageStackUpdate) {
        var currentTopPage = this.$children[this.$children.length - 1].$el;
        var _pageStackUpdate = this._pageStackUpdate,
            lastTopPage = _pageStackUpdate.lastTopPage,
            currentLength = _pageStackUpdate.currentLength;
        var _pageStackUpdate2 = this._pageStackUpdate,
            lastLength = _pageStackUpdate2.lastLength,
            restoreScroll = _pageStackUpdate2.restoreScroll;

        currentLength = currentLength === false ? this.$children.length : currentLength;

        if (currentTopPage !== lastTopPage) {
          this._ready = this._animate({ lastLength: lastLength, currentLength: currentLength, lastTopPage: lastTopPage, currentTopPage: currentTopPage, restoreScroll: restoreScroll });
        } else if (currentLength !== lastLength) {
          currentTopPage.updateBackButton(currentLength > 1);
        }

        lastTopPage = currentTopPage = this._pageStackUpdate = null;
      }
    }
  };

  /* script */
  var __vue_script__$6 = script$6;

  /* template */
  var __vue_render__$6 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-navigator', _vm._g({ domProps: { "options": _vm.options }, on: { "postpop": function postpop($event) {
          if ($event.target !== $event.currentTarget) {
            return null;
          }return _vm._checkSwipe.apply(null, arguments);
        } } }, _vm.unrecognizedListeners), [_vm._t("default", function () {
      return _vm._l(_vm.pageStack, function (page) {
        return _c(page, _vm._g(_vm._b({ key: page.key || page.name, tag: "component" }, 'component', page.onsNavigatorProps, false), _vm.unrecognizedListeners));
      });
    })], 2);
  };
  var __vue_staticRenderFns__$6 = [];

  /* style */
  var __vue_inject_styles__$6 = undefined;
  /* scoped */
  var __vue_scope_id__$6 = undefined;
  /* functional template */
  var __vue_is_functional_template__$6 = false;
  /* component normalizer */
  function __vue_normalize__$6(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsNavigator.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsNavigator = __vue_normalize__$6({ render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 }, __vue_inject_styles__$6, __vue_script__$6, __vue_scope_id__$6, __vue_is_functional_template__$6);

  //

  var script$5 = {
    name: 'v-ons-splitter-side',
    mixins: [hasOptions, deriveEvents],

    props: {
      open: {
        type: Boolean,
        default: undefined
      }
    },

    methods: {
      action: function action() {
        this._shouldUpdate() && this.$el[this.open ? 'open' : 'close'].call(this.$el, this.options).catch(function () {});
      },
      _shouldUpdate: function _shouldUpdate() {
        return this.open !== undefined && this.open !== this.$el.isOpen;
      }
    },

    watch: {
      open: function open() {
        this.action();
      }
    },

    mounted: function mounted() {
      var _this = this;

      this.$on(['postopen', 'postclose', 'modechange'], function () {
        return _this._shouldUpdate() && _this.$emit('update:open', _this.$el.isOpen);
      });

      this.action();
    }
  };

  /* script */
  var __vue_script__$5 = script$5;

  /* template */
  var __vue_render__$5 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-splitter-side', _vm._g({}, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$5 = [];

  /* style */
  var __vue_inject_styles__$5 = undefined;
  /* scoped */
  var __vue_scope_id__$5 = undefined;
  /* functional template */
  var __vue_is_functional_template__$5 = false;
  /* component normalizer */
  function __vue_normalize__$5(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSplitterSide.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSplitterSide = __vue_normalize__$5({ render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 }, __vue_inject_styles__$5, __vue_script__$5, __vue_scope_id__$5, __vue_is_functional_template__$5);

  //
  //
  //
  //
  //

  // 'ons-lazy-repeat';

  var script$4 = {
    name: 'v-ons-lazy-repeat',

    props: {
      renderItem: {
        type: Function,
        required: true,
        validator: function validator(value) {
          var component = value(0);
          if (component._isVue && !component._isMounted) {
            component.$destroy();
            return true;
          }
          return false;
        }
      },
      length: {
        type: Number,
        required: true
      },
      calculateItemHeight: {
        type: Function,
        default: undefined
      }
    },

    data: function data() {
      return {
        provider: null
      };
    },


    methods: {
      _setup: function _setup() {
        var _this = this;

        this.provider && this.provider.destroy();

        var delegate = new this.$ons._ons._internal.LazyRepeatDelegate({
          calculateItemHeight: this.calculateItemHeight,
          createItemContent: function createItemContent(i) {
            return _this.renderItem(i).$mount().$el;
          },
          destroyItem: function destroyItem(i, _ref) {
            var element = _ref.element;
            return element.__vue__.$destroy();
          },
          countItems: function countItems() {
            return _this.length;
          }
        }, null);

        this.provider = new this.$ons._ons._internal.LazyRepeatProvider(this.$parent.$el, delegate);
      },
      refresh: function refresh() {
        return this.provider.refresh();
      }
    },

    watch: {
      renderItem: function renderItem() {
        this._setup();
      },
      length: function length() {
        this._setup();
      },
      calculateItemHeight: function calculateItemHeight() {
        this._setup();
      }
    },

    mounted: function mounted() {
      this._setup();
      this.$vnode.context.$on('refresh', this.refresh);
    },
    beforeDestroy: function beforeDestroy() {
      this.$vnode.context.$off('refresh', this.refresh);

      // This will destroy the provider once the rendered element
      // is detached (detachedCallback). Therefore, animations
      // have time to finish before elements start to disappear.
      // It cannot be set earlier in order to prevent accidental
      // destroys if this element is retached by something else.
      this.$el._lazyRepeatProvider = this.provider;
      this.provider = null;
    }
  };

  /* script */
  var __vue_script__$4 = script$4;

  /* template */
  var __vue_render__$4 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-lazy-repeat');
  };
  var __vue_staticRenderFns__$4 = [];

  /* style */
  var __vue_inject_styles__$4 = undefined;
  /* scoped */
  var __vue_scope_id__$4 = undefined;
  /* functional template */
  var __vue_is_functional_template__$4 = false;
  /* component normalizer */
  function __vue_normalize__$4(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsLazyRepeat.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsLazyRepeat = __vue_normalize__$4({ render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 }, __vue_inject_styles__$4, __vue_script__$4, __vue_scope_id__$4, __vue_is_functional_template__$4);

  //

  var script$3 = {
    name: 'v-ons-select',
    mixins: [modifier],
    model: {
      prop: 'modelProp',
      event: 'modelEvent'
    },
    props: {
      modelProp: [Number, String],
      modelEvent: {
        type: String,
        default: 'input'
      }
    },
    computed: {
      selectedValue: {
        get: function get() {
          return this.modelProp;
        },
        set: function set(val) {
          this.$emit('modelEvent', val);
        }
      }
    }
  };

  /* script */
  var __vue_script__$3 = script$3;

  /* template */
  var __vue_render__$3 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-select', _vm._g({ attrs: { "modifier": _vm.normalizedModifier } }, _vm.$listeners), [_c('select', { directives: [{ name: "model", rawName: "v-model", value: _vm.selectedValue, expression: "selectedValue" }], on: { "change": function change($event) {
          var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
            return o.selected;
          }).map(function (o) {
            var val = "_value" in o ? o._value : o.value;return val;
          });_vm.selectedValue = $event.target.multiple ? $$selectedVal : $$selectedVal[0];
        } } }, [_vm._t("default")], 2)]);
  };
  var __vue_staticRenderFns__$3 = [];

  /* style */
  var __vue_inject_styles__$3 = undefined;
  /* scoped */
  var __vue_scope_id__$3 = undefined;
  /* functional template */
  var __vue_is_functional_template__$3 = false;
  /* component normalizer */
  function __vue_normalize__$3(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSelect.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSelect = __vue_normalize__$3({ render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 }, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3);

  //

  var script$2 = {
    name: 'v-ons-segment',
    mixins: [deriveEvents],

    props: {
      index: {
        type: Number
      }
    },

    watch: {
      index: function index() {
        if (this.index !== this.$el.getActiveButtonIndex()) {
          this.$el.setActiveButton(this.index, { reject: false });
        }
      }
    }
  };

  /* script */
  var __vue_script__$2 = script$2;

  /* template */
  var __vue_render__$2 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-segment', { attrs: { "active-index": _vm.index }, on: { "postchange": function postchange($event) {
          if ($event.target !== $event.currentTarget) {
            return null;
          }return _vm.$emit('update:index', $event.index);
        } } }, [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$2 = [];

  /* style */
  var __vue_inject_styles__$2 = undefined;
  /* scoped */
  var __vue_scope_id__$2 = undefined;
  /* functional template */
  var __vue_is_functional_template__$2 = false;
  /* component normalizer */
  function __vue_normalize__$2(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsSegment.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsSegment = __vue_normalize__$2({ render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 }, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2);

  //

  var script$1 = {
    name: 'v-ons-pull-hook',
    mixins: [deriveEvents],

    props: {
      action: {
        type: Function
      },
      onPull: {
        type: Function
      }
    }
  };

  /* script */
  var __vue_script__$1 = script$1;

  /* template */
  var __vue_render__$1 = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-pull-hook', _vm._g({ domProps: { "onAction": _vm.action, "onPull": _vm.onPull } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__$1 = [];

  /* style */
  var __vue_inject_styles__$1 = undefined;
  /* scoped */
  var __vue_scope_id__$1 = undefined;
  /* functional template */
  var __vue_is_functional_template__$1 = false;
  /* component normalizer */
  function __vue_normalize__$1(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsPullHook.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsPullHook = __vue_normalize__$1({ render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 }, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1);

  //

  var script = {
    name: 'v-ons-page',
    mixins: [deriveEvents, deriveDBB, modifier],

    props: {
      infiniteScroll: {
        type: Function
      }
    }
  };

  /* script */
  var __vue_script__ = script;

  /* template */
  var __vue_render__ = function __vue_render__() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('ons-page', _vm._g({ attrs: { "modifier": _vm.normalizedModifier }, domProps: { "onInfiniteScroll": _vm.infiniteScroll } }, _vm.unrecognizedListeners), [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__ = [];

  /* style */
  var __vue_inject_styles__ = undefined;
  /* scoped */
  var __vue_scope_id__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* component normalizer */
  function __vue_normalize__(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
    var component = (typeof script === 'function' ? script.options : script) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "VOnsPage.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) component.functional = true;
    }

    component._scopeId = scope;

    return component;
  }
  /* style inject */

  /* style inject SSR */

  var VOnsPage = __vue_normalize__({ render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__);

  // Generic components:

  var components = /*#__PURE__*/Object.freeze({
    __proto__: null,
    VOnsToolbar: VOnsToolbar,
    VOnsBottomToolbar: VOnsBottomToolbar,
    VOnsToolbarButton: VOnsToolbarButton,
    VOnsAlertDialogButton: VOnsAlertDialogButton,
    VOnsButton: VOnsButton,
    VOnsIcon: VOnsIcon,
    VOnsCard: VOnsCard,
    VOnsList: VOnsList,
    VOnsListItem: VOnsListItem,
    VOnsListTitle: VOnsListTitle,
    VOnsListHeader: VOnsListHeader,
    VOnsRipple: VOnsRipple,
    VOnsRow: VOnsRow,
    VOnsCol: VOnsCol,
    VOnsProgressBar: VOnsProgressBar,
    VOnsProgressCircular: VOnsProgressCircular,
    VOnsCarouselItem: VOnsCarouselItem,
    VOnsSplitterMask: VOnsSplitterMask,
    VOnsSplitterContent: VOnsSplitterContent,
    VOnsSplitter: VOnsSplitter,
    VOnsSwitch: VOnsSwitch,
    VOnsCheckbox: VOnsCheckbox,
    VOnsInput: VOnsInput,
    VOnsSearchInput: VOnsSearchInput,
    VOnsRange: VOnsRange,
    VOnsRadio: VOnsRadio,
    VOnsFab: VOnsFab,
    VOnsSpeedDialItem: VOnsSpeedDialItem,
    VOnsDialog: VOnsDialog,
    VOnsActionSheet: VOnsActionSheet,
    VOnsActionSheetButton: VOnsActionSheetButton,
    VOnsModal: VOnsModal,
    VOnsToast: VOnsToast,
    VOnsPopover: VOnsPopover,
    VOnsAlertDialog: VOnsAlertDialog,
    VOnsSpeedDial: VOnsSpeedDial,
    VOnsCarousel: VOnsCarousel,
    VOnsTab: VOnsTab,
    VOnsTabbar: VOnsTabbar,
    VOnsBackButton: VOnsBackButton,
    VOnsNavigator: VOnsNavigator,
    VOnsSplitterSide: VOnsSplitterSide,
    VOnsLazyRepeat: VOnsLazyRepeat,
    VOnsSelect: VOnsSelect,
    VOnsSegment: VOnsSegment,
    VOnsPullHook: VOnsPullHook,
    VOnsPage: VOnsPage
  });

  var $ons = setup(ons__default['default']);

  $ons.install = function (Vue) {
    /**
     * Register components of vue-onsenui.
     */
    Object.keys(components).forEach(function (key) {
      return Vue.component(components[key].name, components[key]);
    });

    /**
     * Expose ons object.
     */
    Vue.prototype.$ons = $ons;
  };

  if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.use({ install: $ons.install });
  }

  return $ons;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
